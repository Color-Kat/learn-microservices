services:
  postgres:
    container_name: postgres
    image: postgres
    restart: always
    ports:
      - '5432:5432'
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network

  nats:
    container_name: nats
    image: nats:latest
    restart: always
    ports:
      - '4222:4222'
    networks:
      - microservices-network

  redis:
    container_name: redis
    image: redis
    restart: always
    ports:
      - '6379:6379'

    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3

  api-gateway:
    container_name: api-gateway
    build:
      context: ./api-gateway
      target: development # use it to build the development image
    volumes:
      - ./api-gateway:/app
      - /app/node_modules
    ports:
      - '3000:3000'
    command: npm run start:dev # for clarity
    networks:
      - microservices-network
    depends_on:
      - service-a
      - service-b

  service-a:
    container_name: service-a
    build:
      context: ./service-a
      target: development
    volumes:
        - ./service-a:/app
        - /app/node_modules
    ports:
      - '3001:3001'
      - '3101:3101'
    command: npm run start:dev # for clarity
    networks:
      - microservices-network
    depends_on:
      - postgres

  service-b:
    container_name: service-b
    build:
      context: ./service-b
      target: development
    volumes:
      - ./service-b:/app
      - /app/node_modules
    ports:
      - '3002:3002'
    command: npm run start:dev # for clarity
    networks:
      - microservices-network
    depends_on:
      - redis
      - nats


volumes:
  db-data:

networks:
  microservices-network:
    driver: bridge