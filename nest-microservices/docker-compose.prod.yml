services:
  postgres:
    container_name: prod_postgres
    image: postgres
    restart: always
    ports:
      - '5432:5432'
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network

  #  redis:
  #    container_name: redis
  #    image: redis
  #    restart: always
  #    ports:
  #      - '6379:6379'
  #
  #    healthcheck:
  #      test: [ "CMD", "redis-cli", "ping" ]
  #      interval: 10s
  #      timeout: 5s
  #      retries: 3

  api-gateway:
    container_name: prod_api-gateway
    build:
      context: ./api-gateway
      target: production # use it to build the production image
    ports:
      - '3000:3000'
    networks:
      - microservices-network
    depends_on:
      - service-a
  #      - service-b

  service-a:
    container_name: prod_service-a
    build:
      context: ./service-a
      target: production
    ports:
      - '3001:3001'
      - '3101:3101'
    networks:
      - microservices-network
    depends_on:
      - postgres

#  service-b:
#    container_name: prod_service-b
#    build: ./service-b
#    ports:
#      - '3002:3002'
#    command: npm run start:dev # for clarity
#    depends_on:
#      - redis


volumes:
  db-data:

networks:
  microservices-network:
    driver: bridge