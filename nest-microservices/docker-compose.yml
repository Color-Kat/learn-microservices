services:
  api-gateway:
    container_name: api-gateway
    build:
      context: ./api-gateway
      target: ${BUILD_TARGET} # use it to build the dev or prod image
    volumes:
      - ./api-gateway:/app
      - /app/node_modules
    ports:
      - '3000:3000'
    networks:
      - microservices-network
    depends_on:
      - user-service
      - auth-service
#      - python-service

  user-service:
    container_name: user-service
    build:
      context: ./user-service
      target: ${BUILD_TARGET}
    environment:
      DATABASE_URL: ${USER_DATABASE_URL}
    ports:
      - '3001:3001'
      - '3101:3101'
    volumes:
        - ./user-service:/app
        - /app/node_modules
    networks:
      - microservices-network
    depends_on:
      - user-service-db

  auth-service:
    container_name: auth-service
    build:
      context: ./auth-service
      target: ${BUILD_TARGET}
    volumes:
      - ./auth-service:/app
      - /app/node_modules
    ports:
      - '3002:3002'
      - '3102:3102'
    networks:
      - microservices-network
#    depends_on:
#      - redis

#  python-service:
#    container_name: python-service
#    build: ./python-service
##    ports:
##      - '3003:3003'
#    networks:
#      - microservices-network

  user-service-db:
    container_name: user-service-db
    image: postgres
    restart: always
    ports:
      - '5432:5432'
    volumes:
      - user-db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
#      POSTGRES_DB: ${USER_DB_NAME}

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network

#  nats:
#    container_name: nats
#    image: nats:latest
#    restart: always
#    ports:
#      - '4222:4222'
#    networks:
#      - microservices-network

#  redis:
#    container_name: redis
#    image: redis
#    restart: always
#    ports:
#      - '6379:6379'
#
#    healthcheck:
#      test: [ "CMD", "redis-cli", "ping" ]
#      interval: 10s
#      timeout: 5s
#      retries: 3

volumes:
  user-db-data:

networks:
  microservices-network:
    driver: bridge